//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Character/Controller/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TTTSC.Player.Character.Controller
{
    public partial class @PlayerInputSender : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputSender()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Controlls"",
            ""id"": ""4bbdbb06-7af3-4dcc-b82c-da998073329f"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ae5b37b6-edb0-46fa-b484-1047b375607b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""10271c6e-81f1-4275-b98c-ebfd4131fad9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5a8c769a-b10c-4a17-85f9-5228ef534769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""edb5e334-0aab-4f72-8872-53382954c983"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cf1e17de-957c-4f6c-9fbc-ae16016dcf17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shop"",
                    ""type"": ""Button"",
                    ""id"": ""f0c5d1ce-c578-4d69-84f9-8438ac07a980"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""f670a1f3-22f8-492a-bdb5-756e59cf04f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""62392260-928c-4413-9867-8162ddc0c87b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""72a1ad19-24ab-49b6-809e-deb4eb965511"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropAmmo"",
                    ""type"": ""Button"",
                    ""id"": ""edeec6c4-5830-4f8e-a28d-17b84b853805"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dd3390ea-d08d-43d4-8916-e6981e8c44ff"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41a8cb22-7344-404a-88f3-bfbd720a18d0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bf60ade9-f32c-42bc-a5a2-963c35d51b10"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3055d9ef-ce59-4f47-bf8e-d5ccf63875c7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f52a467d-e5b9-46b4-853d-99cba0831d27"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e0d7acb-150e-4fc9-a91b-9a1998d31dfa"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e65908e5-706f-405b-9dbe-34e12affa0ad"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8104f8e5-f27a-4956-8ef9-2002b280980e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a511a48c-f2a0-4769-84f2-46093bd46c26"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a43359-0859-4b15-9919-4cebb67966d7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c15ccc3-64df-41e5-bc81-49242eda9bc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8937cc8-d75f-4fcc-b934-3c2a5c18bb71"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""b3483537-e801-4a67-b733-c606e902a01d"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""157b46bb-b71e-4a9a-953b-7118a4717e98"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""53b32fc3-1953-44e9-a426-731c051a4dda"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""36eefb0e-f89a-4ecf-bff4-9c0c416ad941"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""abfd1090-1e03-46e2-9513-cada83db6b50"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a6dbb289-a4e4-4df9-9ec2-104398f5b992"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""78783fb6-7e37-449a-bd3b-eebba6036e2b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""818e11ba-1a73-450a-adfe-e8325786b944"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""04271ba8-a18d-4cd2-b6a0-6d075768e238"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4abfa1d6-2fd4-4c68-95c3-ad5a96b395f8"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d901207b-8d93-4616-9604-0c5512c31043"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4567bccd-75dc-4c5f-9aa1-b8fa4cb42e40"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43820282-7818-4d21-b1df-84b622d5abb9"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DropAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28218d15-65b8-4844-92d6-43077a7ef2de"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c84fc16d-14a0-4f70-9974-685479021d7c"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8193ed21-c881-4d25-8b79-1b9d20eada5f"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f5044c4f-a79a-42a2-8da3-9063c0b7a76c"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a716393e-407f-4eaa-8b07-96314914ccff"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5d7131f-7a50-44e8-b6d8-1f34bcc95e00"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Controlls
            m_Controlls = asset.FindActionMap("Controlls", throwIfNotFound: true);
            m_Controlls_Walk = m_Controlls.FindAction("Walk", throwIfNotFound: true);
            m_Controlls_Sprint = m_Controlls.FindAction("Sprint", throwIfNotFound: true);
            m_Controlls_Crouch = m_Controlls.FindAction("Crouch", throwIfNotFound: true);
            m_Controlls_Jump = m_Controlls.FindAction("Jump", throwIfNotFound: true);
            m_Controlls_Interact = m_Controlls.FindAction("Interact", throwIfNotFound: true);
            m_Controlls_Shop = m_Controlls.FindAction("Shop", throwIfNotFound: true);
            m_Controlls_Aim = m_Controlls.FindAction("Aim", throwIfNotFound: true);
            m_Controlls_Shoot = m_Controlls.FindAction("Shoot", throwIfNotFound: true);
            m_Controlls_DropItem = m_Controlls.FindAction("DropItem", throwIfNotFound: true);
            m_Controlls_DropAmmo = m_Controlls.FindAction("DropAmmo", throwIfNotFound: true);
            m_Controlls_LookX = m_Controlls.FindAction("LookX", throwIfNotFound: true);
            m_Controlls_LookY = m_Controlls.FindAction("LookY", throwIfNotFound: true);
            m_Controlls_Look = m_Controlls.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Controlls
        private readonly InputActionMap m_Controlls;
        private IControllsActions m_ControllsActionsCallbackInterface;
        private readonly InputAction m_Controlls_Walk;
        private readonly InputAction m_Controlls_Sprint;
        private readonly InputAction m_Controlls_Crouch;
        private readonly InputAction m_Controlls_Jump;
        private readonly InputAction m_Controlls_Interact;
        private readonly InputAction m_Controlls_Shop;
        private readonly InputAction m_Controlls_Aim;
        private readonly InputAction m_Controlls_Shoot;
        private readonly InputAction m_Controlls_DropItem;
        private readonly InputAction m_Controlls_DropAmmo;
        private readonly InputAction m_Controlls_LookX;
        private readonly InputAction m_Controlls_LookY;
        private readonly InputAction m_Controlls_Look;
        public struct ControllsActions
        {
            private @PlayerInputSender m_Wrapper;
            public ControllsActions(@PlayerInputSender wrapper) { m_Wrapper = wrapper; }
            public InputAction @Walk => m_Wrapper.m_Controlls_Walk;
            public InputAction @Sprint => m_Wrapper.m_Controlls_Sprint;
            public InputAction @Crouch => m_Wrapper.m_Controlls_Crouch;
            public InputAction @Jump => m_Wrapper.m_Controlls_Jump;
            public InputAction @Interact => m_Wrapper.m_Controlls_Interact;
            public InputAction @Shop => m_Wrapper.m_Controlls_Shop;
            public InputAction @Aim => m_Wrapper.m_Controlls_Aim;
            public InputAction @Shoot => m_Wrapper.m_Controlls_Shoot;
            public InputAction @DropItem => m_Wrapper.m_Controlls_DropItem;
            public InputAction @DropAmmo => m_Wrapper.m_Controlls_DropAmmo;
            public InputAction @LookX => m_Wrapper.m_Controlls_LookX;
            public InputAction @LookY => m_Wrapper.m_Controlls_LookY;
            public InputAction @Look => m_Wrapper.m_Controlls_Look;
            public InputActionMap Get() { return m_Wrapper.m_Controlls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllsActions set) { return set.Get(); }
            public void SetCallbacks(IControllsActions instance)
            {
                if (m_Wrapper.m_ControllsActionsCallbackInterface != null)
                {
                    @Walk.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnWalk;
                    @Walk.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnWalk;
                    @Walk.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnWalk;
                    @Sprint.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnSprint;
                    @Crouch.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnCrouch;
                    @Jump.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnJump;
                    @Interact.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnInteract;
                    @Shop.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShop;
                    @Shop.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShop;
                    @Shop.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShop;
                    @Aim.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnAim;
                    @Shoot.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnShoot;
                    @DropItem.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropItem;
                    @DropItem.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropItem;
                    @DropItem.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropItem;
                    @DropAmmo.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropAmmo;
                    @DropAmmo.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropAmmo;
                    @DropAmmo.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnDropAmmo;
                    @LookX.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookX;
                    @LookX.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookX;
                    @LookX.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookX;
                    @LookY.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookY;
                    @LookY.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookY;
                    @LookY.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLookY;
                    @Look.started -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_ControllsActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_ControllsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Walk.started += instance.OnWalk;
                    @Walk.performed += instance.OnWalk;
                    @Walk.canceled += instance.OnWalk;
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @Shop.started += instance.OnShop;
                    @Shop.performed += instance.OnShop;
                    @Shop.canceled += instance.OnShop;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @DropItem.started += instance.OnDropItem;
                    @DropItem.performed += instance.OnDropItem;
                    @DropItem.canceled += instance.OnDropItem;
                    @DropAmmo.started += instance.OnDropAmmo;
                    @DropAmmo.performed += instance.OnDropAmmo;
                    @DropAmmo.canceled += instance.OnDropAmmo;
                    @LookX.started += instance.OnLookX;
                    @LookX.performed += instance.OnLookX;
                    @LookX.canceled += instance.OnLookX;
                    @LookY.started += instance.OnLookY;
                    @LookY.performed += instance.OnLookY;
                    @LookY.canceled += instance.OnLookY;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public ControllsActions @Controlls => new ControllsActions(this);
        private int m_KeyboardAndMouseSchemeIndex = -1;
        public InputControlScheme KeyboardAndMouseScheme
        {
            get
            {
                if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
                return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IControllsActions
        {
            void OnWalk(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnShop(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnDropItem(InputAction.CallbackContext context);
            void OnDropAmmo(InputAction.CallbackContext context);
            void OnLookX(InputAction.CallbackContext context);
            void OnLookY(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
