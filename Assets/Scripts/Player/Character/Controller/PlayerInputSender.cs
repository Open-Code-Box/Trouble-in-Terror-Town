//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Resources/Character/Controller/PlayerInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TTTSC.Player.Character.Controller
{
    public partial class @PlayerInputSender : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputSender()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputMap"",
    ""maps"": [
        {
            ""name"": ""GlobalControls"",
            ""id"": ""80a94b07-c872-4005-ab13-f6846539b962"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e306a0c6-05e1-41f8-8497-ee988dfacefb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e41a01a-35e8-4cfc-84cc-79c5a7b7921f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookY"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f46c648c-2667-4e0b-aab6-e407577cc890"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a9fa0561-8e05-48bb-a5b7-391ddfbc1710"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b11e168-a64e-4f38-87b5-29ad02d7cde4"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85545a0e-6f34-45e4-b648-4616c8a0d40b"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b61f03a-0cf0-41be-8210-bbac92196458"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5f613f7-9836-40b3-bcdc-401db9602926"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""LookY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41fe5882-9820-403d-9da9-1ba0a8c437b7"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e8ae0b3-4972-4351-a77c-2a3125cf7ab7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WSAD"",
                    ""id"": ""3a46acbf-ebd5-4e38-933c-d53068556077"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""94a4b58d-8a4f-409e-bfea-dac4c7d853f0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7cee12a9-312a-4384-b4d7-9b87a7ff7e6f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""09eb7fac-54eb-4d63-97e6-1cf8342612c2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""df455feb-ac72-4da7-8d5f-920dfa037f30"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""68d39b58-7346-4964-8cb6-fd351c720e2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""62677d38-551e-46c2-a453-698e6a5c5583"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a9d0ea59-e180-44ca-b0b9-6cd7419244d9"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f263857-e42c-4820-ae0d-a2d6a765c3d0"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""28d03a05-136e-4883-bc46-52e402cfe114"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AliveControls"",
            ""id"": ""4bbdbb06-7af3-4dcc-b82c-da998073329f"",
            ""actions"": [
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""10271c6e-81f1-4275-b98c-ebfd4131fad9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5a8c769a-b10c-4a17-85f9-5228ef534769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""edb5e334-0aab-4f72-8872-53382954c983"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cf1e17de-957c-4f6c-9fbc-ae16016dcf17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shop"",
                    ""type"": ""Button"",
                    ""id"": ""f0c5d1ce-c578-4d69-84f9-8438ac07a980"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""f670a1f3-22f8-492a-bdb5-756e59cf04f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""62392260-928c-4413-9867-8162ddc0c87b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropItem"",
                    ""type"": ""Button"",
                    ""id"": ""72a1ad19-24ab-49b6-809e-deb4eb965511"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DropAmmo"",
                    ""type"": ""Button"",
                    ""id"": ""edeec6c4-5830-4f8e-a28d-17b84b853805"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3055d9ef-ce59-4f47-bf8e-d5ccf63875c7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f52a467d-e5b9-46b4-853d-99cba0831d27"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e0d7acb-150e-4fc9-a91b-9a1998d31dfa"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e65908e5-706f-405b-9dbe-34e12affa0ad"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8104f8e5-f27a-4956-8ef9-2002b280980e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a511a48c-f2a0-4769-84f2-46093bd46c26"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b9a43359-0859-4b15-9919-4cebb67966d7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c15ccc3-64df-41e5-bc81-49242eda9bc7"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8937cc8-d75f-4fcc-b934-3c2a5c18bb71"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d901207b-8d93-4616-9604-0c5512c31043"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""Shop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4567bccd-75dc-4c5f-9aa1-b8fa4cb42e40"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DropItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43820282-7818-4d21-b1df-84b622d5abb9"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""DropAmmo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpectatorControls"",
            ""id"": ""2cc562f6-1b6c-4033-b783-2a481ab11dec"",
            ""actions"": [
                {
                    ""name"": ""FlyFast"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e150f46-f771-4738-92fc-2fc13b6697b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlySlow"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4ec09521-b697-424d-b042-16c4c355012c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""040d9888-cb95-4fad-a331-f2a145bc3734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlyDown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eac59bf7-63bf-49e6-b205-9ee40b7c6543"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ScrollSpeedControlw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c6404499-255c-4521-abfa-5fb829afd1e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6d7fc3a-514a-4be7-9cbc-9013a799f97b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""FlyFast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba11331b-16b8-418a-beff-a7f2b229c9fc"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FlyFast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94669407-3bdd-4d9e-97a7-cfd8240c719d"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardAndMouse"",
                    ""action"": ""FlySlow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b17b0cd2-d98f-49f0-8515-9c8e7d66d75d"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""FlySlow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad1fec41-855d-4fb8-a36a-483ddfd01293"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09208229-bf6f-4337-a4f3-0d7309e57c7c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlyDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd457b70-a6c0-4b36-ae23-a86735c06bee"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScrollSpeedControlw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardAndMouse"",
            ""bindingGroup"": ""KeyboardAndMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // GlobalControls
            m_GlobalControls = asset.FindActionMap("GlobalControls", throwIfNotFound: true);
            m_GlobalControls_Move = m_GlobalControls.FindAction("Move", throwIfNotFound: true);
            m_GlobalControls_LookX = m_GlobalControls.FindAction("LookX", throwIfNotFound: true);
            m_GlobalControls_LookY = m_GlobalControls.FindAction("LookY", throwIfNotFound: true);
            m_GlobalControls_Look = m_GlobalControls.FindAction("Look", throwIfNotFound: true);
            // AliveControls
            m_AliveControls = asset.FindActionMap("AliveControls", throwIfNotFound: true);
            m_AliveControls_Sprint = m_AliveControls.FindAction("Sprint", throwIfNotFound: true);
            m_AliveControls_Crouch = m_AliveControls.FindAction("Crouch", throwIfNotFound: true);
            m_AliveControls_Jump = m_AliveControls.FindAction("Jump", throwIfNotFound: true);
            m_AliveControls_Interact = m_AliveControls.FindAction("Interact", throwIfNotFound: true);
            m_AliveControls_Shop = m_AliveControls.FindAction("Shop", throwIfNotFound: true);
            m_AliveControls_Aim = m_AliveControls.FindAction("Aim", throwIfNotFound: true);
            m_AliveControls_Shoot = m_AliveControls.FindAction("Shoot", throwIfNotFound: true);
            m_AliveControls_DropItem = m_AliveControls.FindAction("DropItem", throwIfNotFound: true);
            m_AliveControls_DropAmmo = m_AliveControls.FindAction("DropAmmo", throwIfNotFound: true);
            // SpectatorControls
            m_SpectatorControls = asset.FindActionMap("SpectatorControls", throwIfNotFound: true);
            m_SpectatorControls_FlyFast = m_SpectatorControls.FindAction("FlyFast", throwIfNotFound: true);
            m_SpectatorControls_FlySlow = m_SpectatorControls.FindAction("FlySlow", throwIfNotFound: true);
            m_SpectatorControls_FlyUp = m_SpectatorControls.FindAction("FlyUp", throwIfNotFound: true);
            m_SpectatorControls_FlyDown = m_SpectatorControls.FindAction("FlyDown", throwIfNotFound: true);
            m_SpectatorControls_ScrollSpeedControlw = m_SpectatorControls.FindAction("ScrollSpeedControlw", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GlobalControls
        private readonly InputActionMap m_GlobalControls;
        private IGlobalControlsActions m_GlobalControlsActionsCallbackInterface;
        private readonly InputAction m_GlobalControls_Move;
        private readonly InputAction m_GlobalControls_LookX;
        private readonly InputAction m_GlobalControls_LookY;
        private readonly InputAction m_GlobalControls_Look;
        public struct GlobalControlsActions
        {
            private @PlayerInputSender m_Wrapper;
            public GlobalControlsActions(@PlayerInputSender wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_GlobalControls_Move;
            public InputAction @LookX => m_Wrapper.m_GlobalControls_LookX;
            public InputAction @LookY => m_Wrapper.m_GlobalControls_LookY;
            public InputAction @Look => m_Wrapper.m_GlobalControls_Look;
            public InputActionMap Get() { return m_Wrapper.m_GlobalControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GlobalControlsActions set) { return set.Get(); }
            public void SetCallbacks(IGlobalControlsActions instance)
            {
                if (m_Wrapper.m_GlobalControlsActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnMove;
                    @LookX.started -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookX;
                    @LookX.performed -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookX;
                    @LookX.canceled -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookX;
                    @LookY.started -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookY;
                    @LookY.performed -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookY;
                    @LookY.canceled -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLookY;
                    @Look.started -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_GlobalControlsActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_GlobalControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @LookX.started += instance.OnLookX;
                    @LookX.performed += instance.OnLookX;
                    @LookX.canceled += instance.OnLookX;
                    @LookY.started += instance.OnLookY;
                    @LookY.performed += instance.OnLookY;
                    @LookY.canceled += instance.OnLookY;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public GlobalControlsActions @GlobalControls => new GlobalControlsActions(this);

        // AliveControls
        private readonly InputActionMap m_AliveControls;
        private IAliveControlsActions m_AliveControlsActionsCallbackInterface;
        private readonly InputAction m_AliveControls_Sprint;
        private readonly InputAction m_AliveControls_Crouch;
        private readonly InputAction m_AliveControls_Jump;
        private readonly InputAction m_AliveControls_Interact;
        private readonly InputAction m_AliveControls_Shop;
        private readonly InputAction m_AliveControls_Aim;
        private readonly InputAction m_AliveControls_Shoot;
        private readonly InputAction m_AliveControls_DropItem;
        private readonly InputAction m_AliveControls_DropAmmo;
        public struct AliveControlsActions
        {
            private @PlayerInputSender m_Wrapper;
            public AliveControlsActions(@PlayerInputSender wrapper) { m_Wrapper = wrapper; }
            public InputAction @Sprint => m_Wrapper.m_AliveControls_Sprint;
            public InputAction @Crouch => m_Wrapper.m_AliveControls_Crouch;
            public InputAction @Jump => m_Wrapper.m_AliveControls_Jump;
            public InputAction @Interact => m_Wrapper.m_AliveControls_Interact;
            public InputAction @Shop => m_Wrapper.m_AliveControls_Shop;
            public InputAction @Aim => m_Wrapper.m_AliveControls_Aim;
            public InputAction @Shoot => m_Wrapper.m_AliveControls_Shoot;
            public InputAction @DropItem => m_Wrapper.m_AliveControls_DropItem;
            public InputAction @DropAmmo => m_Wrapper.m_AliveControls_DropAmmo;
            public InputActionMap Get() { return m_Wrapper.m_AliveControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AliveControlsActions set) { return set.Get(); }
            public void SetCallbacks(IAliveControlsActions instance)
            {
                if (m_Wrapper.m_AliveControlsActionsCallbackInterface != null)
                {
                    @Sprint.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnSprint;
                    @Sprint.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnSprint;
                    @Sprint.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnSprint;
                    @Crouch.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnCrouch;
                    @Crouch.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnCrouch;
                    @Crouch.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnCrouch;
                    @Jump.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnJump;
                    @Interact.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnInteract;
                    @Shop.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShop;
                    @Shop.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShop;
                    @Shop.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShop;
                    @Aim.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnAim;
                    @Shoot.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnShoot;
                    @DropItem.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropItem;
                    @DropItem.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropItem;
                    @DropItem.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropItem;
                    @DropAmmo.started -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropAmmo;
                    @DropAmmo.performed -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropAmmo;
                    @DropAmmo.canceled -= m_Wrapper.m_AliveControlsActionsCallbackInterface.OnDropAmmo;
                }
                m_Wrapper.m_AliveControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Sprint.started += instance.OnSprint;
                    @Sprint.performed += instance.OnSprint;
                    @Sprint.canceled += instance.OnSprint;
                    @Crouch.started += instance.OnCrouch;
                    @Crouch.performed += instance.OnCrouch;
                    @Crouch.canceled += instance.OnCrouch;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @Shop.started += instance.OnShop;
                    @Shop.performed += instance.OnShop;
                    @Shop.canceled += instance.OnShop;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @DropItem.started += instance.OnDropItem;
                    @DropItem.performed += instance.OnDropItem;
                    @DropItem.canceled += instance.OnDropItem;
                    @DropAmmo.started += instance.OnDropAmmo;
                    @DropAmmo.performed += instance.OnDropAmmo;
                    @DropAmmo.canceled += instance.OnDropAmmo;
                }
            }
        }
        public AliveControlsActions @AliveControls => new AliveControlsActions(this);

        // SpectatorControls
        private readonly InputActionMap m_SpectatorControls;
        private ISpectatorControlsActions m_SpectatorControlsActionsCallbackInterface;
        private readonly InputAction m_SpectatorControls_FlyFast;
        private readonly InputAction m_SpectatorControls_FlySlow;
        private readonly InputAction m_SpectatorControls_FlyUp;
        private readonly InputAction m_SpectatorControls_FlyDown;
        private readonly InputAction m_SpectatorControls_ScrollSpeedControlw;
        public struct SpectatorControlsActions
        {
            private @PlayerInputSender m_Wrapper;
            public SpectatorControlsActions(@PlayerInputSender wrapper) { m_Wrapper = wrapper; }
            public InputAction @FlyFast => m_Wrapper.m_SpectatorControls_FlyFast;
            public InputAction @FlySlow => m_Wrapper.m_SpectatorControls_FlySlow;
            public InputAction @FlyUp => m_Wrapper.m_SpectatorControls_FlyUp;
            public InputAction @FlyDown => m_Wrapper.m_SpectatorControls_FlyDown;
            public InputAction @ScrollSpeedControlw => m_Wrapper.m_SpectatorControls_ScrollSpeedControlw;
            public InputActionMap Get() { return m_Wrapper.m_SpectatorControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SpectatorControlsActions set) { return set.Get(); }
            public void SetCallbacks(ISpectatorControlsActions instance)
            {
                if (m_Wrapper.m_SpectatorControlsActionsCallbackInterface != null)
                {
                    @FlyFast.started -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyFast;
                    @FlyFast.performed -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyFast;
                    @FlyFast.canceled -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyFast;
                    @FlySlow.started -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlySlow;
                    @FlySlow.performed -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlySlow;
                    @FlySlow.canceled -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlySlow;
                    @FlyUp.started -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyUp;
                    @FlyUp.performed -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyUp;
                    @FlyUp.canceled -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyUp;
                    @FlyDown.started -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyDown;
                    @FlyDown.performed -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyDown;
                    @FlyDown.canceled -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnFlyDown;
                    @ScrollSpeedControlw.started -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnScrollSpeedControlw;
                    @ScrollSpeedControlw.performed -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnScrollSpeedControlw;
                    @ScrollSpeedControlw.canceled -= m_Wrapper.m_SpectatorControlsActionsCallbackInterface.OnScrollSpeedControlw;
                }
                m_Wrapper.m_SpectatorControlsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @FlyFast.started += instance.OnFlyFast;
                    @FlyFast.performed += instance.OnFlyFast;
                    @FlyFast.canceled += instance.OnFlyFast;
                    @FlySlow.started += instance.OnFlySlow;
                    @FlySlow.performed += instance.OnFlySlow;
                    @FlySlow.canceled += instance.OnFlySlow;
                    @FlyUp.started += instance.OnFlyUp;
                    @FlyUp.performed += instance.OnFlyUp;
                    @FlyUp.canceled += instance.OnFlyUp;
                    @FlyDown.started += instance.OnFlyDown;
                    @FlyDown.performed += instance.OnFlyDown;
                    @FlyDown.canceled += instance.OnFlyDown;
                    @ScrollSpeedControlw.started += instance.OnScrollSpeedControlw;
                    @ScrollSpeedControlw.performed += instance.OnScrollSpeedControlw;
                    @ScrollSpeedControlw.canceled += instance.OnScrollSpeedControlw;
                }
            }
        }
        public SpectatorControlsActions @SpectatorControls => new SpectatorControlsActions(this);
        private int m_KeyboardAndMouseSchemeIndex = -1;
        public InputControlScheme KeyboardAndMouseScheme
        {
            get
            {
                if (m_KeyboardAndMouseSchemeIndex == -1) m_KeyboardAndMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardAndMouse");
                return asset.controlSchemes[m_KeyboardAndMouseSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IGlobalControlsActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnLookX(InputAction.CallbackContext context);
            void OnLookY(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
        }
        public interface IAliveControlsActions
        {
            void OnSprint(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnShop(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnDropItem(InputAction.CallbackContext context);
            void OnDropAmmo(InputAction.CallbackContext context);
        }
        public interface ISpectatorControlsActions
        {
            void OnFlyFast(InputAction.CallbackContext context);
            void OnFlySlow(InputAction.CallbackContext context);
            void OnFlyUp(InputAction.CallbackContext context);
            void OnFlyDown(InputAction.CallbackContext context);
            void OnScrollSpeedControlw(InputAction.CallbackContext context);
        }
    }
}
